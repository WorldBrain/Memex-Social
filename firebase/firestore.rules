rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /homeFeedInfo/{user} {
            allow get: if 
              // Ownership rules
              request.auth.uid == user
            ;
            allow create: if 
              // Type checks
              request.resource.data.lastSeen is timestamp &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
            allow update: if 
              // Type checks
              (!('lastSeen' in request.resource.data.keys()) || request.resource.data.lastSeen is timestamp) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
        }
        match /activityFollow/{activityFollow} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              request.resource.data.objectId is string &&
              request.resource.data.collection is string &&
              request.resource.data.createdWhen is timestamp &&
            
            
              // Ownership rules
              request.auth.uid == request.resource.data.user
            ;
            allow delete: if 
              // Ownership rules
              request.auth.uid == resource.data.user
            ;
        }
        match /personalAnalyticEvent/{user} {
            match /objects/{personalAnalyticEvent} {
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.type is string &&
                  (!('str1' in request.resource.data.keys()) || request.resource.data.str1 == null || request.resource.data.str1 is string) &&
                  (!('str2' in request.resource.data.keys()) || request.resource.data.str2 == null || request.resource.data.str2 is string) &&
                  (!('str3' in request.resource.data.keys()) || request.resource.data.str3 == null || request.resource.data.str3 is string) &&
                  (!('float1' in request.resource.data.keys()) || request.resource.data.float1 == null || request.resource.data.float1 is number) &&
                  (!('float2' in request.resource.data.keys()) || request.resource.data.float2 == null || request.resource.data.float2 is number) &&
                  (!('float3' in request.resource.data.keys()) || request.resource.data.float3 == null || request.resource.data.float3 is number) &&
                  (!('time1' in request.resource.data.keys()) || request.resource.data.time1 == null || request.resource.data.time1 is timestamp) &&
                  (!('time2' in request.resource.data.keys()) || request.resource.data.time2 == null || request.resource.data.time2 is timestamp) &&
                  (!('time3' in request.resource.data.keys()) || request.resource.data.time3 == null || request.resource.data.time3 is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type is string) &&
                  (!('str1' in request.resource.data.keys()) || request.resource.data.str1 == null || request.resource.data.str1 is string) &&
                  (!('str2' in request.resource.data.keys()) || request.resource.data.str2 == null || request.resource.data.str2 is string) &&
                  (!('str3' in request.resource.data.keys()) || request.resource.data.str3 == null || request.resource.data.str3 is string) &&
                  (!('float1' in request.resource.data.keys()) || request.resource.data.float1 == null || request.resource.data.float1 is number) &&
                  (!('float2' in request.resource.data.keys()) || request.resource.data.float2 == null || request.resource.data.float2 is number) &&
                  (!('float3' in request.resource.data.keys()) || request.resource.data.float3 == null || request.resource.data.float3 is number) &&
                  (!('time1' in request.resource.data.keys()) || request.resource.data.time1 == null || request.resource.data.time1 is timestamp) &&
                  (!('time2' in request.resource.data.keys()) || request.resource.data.time2 == null || request.resource.data.time2 is timestamp) &&
                  (!('time3' in request.resource.data.keys()) || request.resource.data.time3 == null || request.resource.data.time3 is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnalyticStats/{user} {
            allow get: if 
              // Ownership rules
              request.auth.uid == user
            ;
            allow create: if 
              // Type checks
              request.resource.data.installedWhen is timestamp &&
              (!('registeredWhen' in request.resource.data.keys()) || request.resource.data.registeredWhen == null || request.resource.data.registeredWhen is timestamp) &&
              (!('uninstalledWhen' in request.resource.data.keys()) || request.resource.data.uninstalledWhen == null || request.resource.data.uninstalledWhen is timestamp) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
            allow update: if 
              // Type checks
              (!('installedWhen' in request.resource.data.keys()) || request.resource.data.installedWhen is timestamp) &&
              (!('registeredWhen' in request.resource.data.keys()) || request.resource.data.registeredWhen == null || request.resource.data.registeredWhen is timestamp) &&
              (!('uninstalledWhen' in request.resource.data.keys()) || request.resource.data.uninstalledWhen == null || request.resource.data.uninstalledWhen is timestamp) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
        }
        match /blueskyUser/{user} {
            allow get: if 
              // Permission rules
              true
            ;
        }
        match /blueskyList/{sharedList} {
            allow get: if 
              // Permission rules
              true
            ;
        }
        match /discordList/{sharedList} {
            allow get: if 
              // Permission rules
              true
            ;
        }
        match /slackList/{sharedList} {
            allow get: if 
              // Permission rules
              true
            ;
        }
        match /sharedList/{sharedList} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              request.resource.data.createdWhen is timestamp &&
              request.resource.data.updatedWhen is timestamp &&
              (!('type' in request.resource.data.keys()) || request.resource.data.type == null || request.resource.data.type is string) &&
              request.resource.data.title is string &&
              (!('description' in request.resource.data.keys()) || request.resource.data.description == null || request.resource.data.description is string) &&
              (!('platform' in request.resource.data.keys()) || request.resource.data.platform == null || request.resource.data.platform is string) &&
              (!('private' in request.resource.data.keys()) || request.resource.data.private == null || request.resource.data.private is bool) &&
            
            
              // Ownership rules
              request.auth.uid == request.resource.data.creator
            ;
            allow update: if 
              // Type checks
              (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
              (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
              (!('type' in request.resource.data.keys()) || request.resource.data.type == null || request.resource.data.type is string) &&
              (!('title' in request.resource.data.keys()) || request.resource.data.title is string) &&
              (!('description' in request.resource.data.keys()) || request.resource.data.description == null || request.resource.data.description is string) &&
              (!('platform' in request.resource.data.keys()) || request.resource.data.platform == null || request.resource.data.platform is string) &&
              (!('private' in request.resource.data.keys()) || request.resource.data.private == null || request.resource.data.private is bool) &&
            
            
              // Ownership rules
              request.auth.uid == resource.data.creator && ((!('creator' in request.resource.data.keys())) || request.auth.uid == request.resource.data.creator)
            ;
            allow delete: if 
              // Ownership rules
              request.auth.uid == resource.data.creator
            ;
        }
        match /sharedListCreatorInfo/{creator} {
            match /lists/{sharedListCreatorInfo} {
                allow get: if 
                  // Permission rules
                  true
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.localListId is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == creator
                ;
                allow update: if 
                  // Type checks
                  (!('localListId' in request.resource.data.keys()) || request.resource.data.localListId is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == creator
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == creator
                ;
            }
        }
        match /sharedContentFingerprint/{sharedContentFingerprint} {
            allow get: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.private != true) || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow create: if 
              // Type checks
              request.resource.data.normalizedUrl is string &&
              request.resource.data.fingerprintScheme is string &&
              request.resource.data.fingerprint is string &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow update: if 
              // Type checks
              (!('normalizedUrl' in request.resource.data.keys()) || request.resource.data.normalizedUrl is string) &&
              (!('fingerprintScheme' in request.resource.data.keys()) || request.resource.data.fingerprintScheme is string) &&
              (!('fingerprint' in request.resource.data.keys()) || request.resource.data.fingerprint is string) &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow delete: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
        }
        match /sharedContentLocator/{sharedContentLocator} {
            allow get: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.private != true) || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow create: if 
              // Type checks
              request.resource.data.normalizedUrl is string &&
              request.resource.data.originalUrl is string &&
              (!('location' in request.resource.data.keys()) || request.resource.data.location == null || request.resource.data.location is string) &&
              request.resource.data.locationScheme is string &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow update: if 
              // Type checks
              (!('normalizedUrl' in request.resource.data.keys()) || request.resource.data.normalizedUrl is string) &&
              (!('originalUrl' in request.resource.data.keys()) || request.resource.data.originalUrl is string) &&
              (!('location' in request.resource.data.keys()) || request.resource.data.location == null || request.resource.data.location is string) &&
              (!('locationScheme' in request.resource.data.keys()) || request.resource.data.locationScheme is string) &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow delete: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
        }
        match /sharedListEntry/{sharedListEntry} {
            allow get: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.private != true) || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow create: if 
              // Type checks
              request.resource.data.createdWhen is timestamp &&
              request.resource.data.updatedWhen is timestamp &&
              (!('entryTitle' in request.resource.data.keys()) || request.resource.data.entryTitle == null || request.resource.data.entryTitle is string) &&
              request.resource.data.normalizedUrl is string &&
              request.resource.data.originalUrl is string &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow update: if 
              // Type checks
              (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
              (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
              (!('entryTitle' in request.resource.data.keys()) || request.resource.data.entryTitle == null || request.resource.data.entryTitle is string) &&
              (!('normalizedUrl' in request.resource.data.keys()) || request.resource.data.normalizedUrl is string) &&
              (!('originalUrl' in request.resource.data.keys()) || request.resource.data.originalUrl is string) &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow delete: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
        }
        match /sharedListRole/{sharedList} {
            match /users/{user} {
                allow get: if 
                  // Permission rules
                  true
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                  request.resource.data.roleID is number &&
                
                
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(sharedList)).data.creator == request.auth.uid)
                ;
            }
        }
        match /sharedListRoleByUser/{user} {
            match /lists/{sharedList} {
                allow get: if 
                  // Permission rules
                  true
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                  request.resource.data.roleID is number &&
                
                
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.auth.uid)
                ;
            }
        }
        match /sharedListKey/{sharedList} {
            match /keys/{sharedListKey} {
                allow list: if 
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(sharedList)).data.creator == request.auth.uid)
                ;
                allow get: if 
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(sharedList)).data.creator == request.auth.uid)
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                  (!('expiresWhen' in request.resource.data.keys()) || request.resource.data.expiresWhen == null || request.resource.data.expiresWhen is timestamp) &&
                  (!('singleUse' in request.resource.data.keys()) || request.resource.data.singleUse == null || request.resource.data.singleUse is bool) &&
                  (!('disabled' in request.resource.data.keys()) || request.resource.data.disabled == null || request.resource.data.disabled is bool) &&
                  request.resource.data.roleID is number &&
                
                
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(sharedList)).data.creator == request.auth.uid)
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                  (!('expiresWhen' in request.resource.data.keys()) || request.resource.data.expiresWhen == null || request.resource.data.expiresWhen is timestamp) &&
                  (!('singleUse' in request.resource.data.keys()) || request.resource.data.singleUse == null || request.resource.data.singleUse is bool) &&
                  (!('disabled' in request.resource.data.keys()) || request.resource.data.disabled == null || request.resource.data.disabled is bool) &&
                  (!('roleID' in request.resource.data.keys()) || request.resource.data.roleID is number) &&
                
                
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(sharedList)).data.creator == request.auth.uid)
                ;
                allow delete: if 
                  // Permission rules
                  (get(/databases/$(database)/documents/sharedList/$(sharedList)).data.creator == request.auth.uid)
                ;
            }
        }
        match /sharedPageInfo/{sharedPageInfo} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              request.resource.data.createdWhen is timestamp &&
              request.resource.data.updatedWhen is timestamp &&
              request.resource.data.normalizedUrl is string &&
              request.resource.data.originalUrl is string &&
              (!('fullTitle' in request.resource.data.keys()) || request.resource.data.fullTitle == null || request.resource.data.fullTitle is string) &&
            
            
              // Ownership rules
              request.auth.uid == request.resource.data.creator
            ;
            allow update: if 
              // Type checks
              (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
              (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
              (!('normalizedUrl' in request.resource.data.keys()) || request.resource.data.normalizedUrl is string) &&
              (!('originalUrl' in request.resource.data.keys()) || request.resource.data.originalUrl is string) &&
              (!('fullTitle' in request.resource.data.keys()) || request.resource.data.fullTitle == null || request.resource.data.fullTitle is string) &&
            
            
              // Ownership rules
              request.auth.uid == resource.data.creator && ((!('creator' in request.resource.data.keys())) || request.auth.uid == request.resource.data.creator)
            ;
            allow delete: if 
              // Ownership rules
              request.auth.uid == resource.data.creator
            ;
        }
        match /sharedAnnotation/{sharedAnnotation} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              request.resource.data.normalizedPageUrl is string &&
              request.resource.data.createdWhen is timestamp &&
              request.resource.data.uploadedWhen is timestamp &&
              request.resource.data.updatedWhen is timestamp &&
              (!('body' in request.resource.data.keys()) || request.resource.data.body == null || request.resource.data.body is string) &&
              (!('comment' in request.resource.data.keys()) || request.resource.data.comment == null || request.resource.data.comment is string) &&
              (!('selector' in request.resource.data.keys()) || request.resource.data.selector == null || request.resource.data.selector is string) &&
            
            
              // Ownership rules
              request.auth.uid == request.resource.data.creator
            ;
            allow update: if 
              // Type checks
              (!('normalizedPageUrl' in request.resource.data.keys()) || request.resource.data.normalizedPageUrl is string) &&
              (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
              (!('uploadedWhen' in request.resource.data.keys()) || request.resource.data.uploadedWhen is timestamp) &&
              (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
              (!('body' in request.resource.data.keys()) || request.resource.data.body == null || request.resource.data.body is string) &&
              (!('comment' in request.resource.data.keys()) || request.resource.data.comment == null || request.resource.data.comment is string) &&
              (!('selector' in request.resource.data.keys()) || request.resource.data.selector == null || request.resource.data.selector is string) &&
            
            
              // Ownership rules
              request.auth.uid == resource.data.creator && ((!('creator' in request.resource.data.keys())) || request.auth.uid == request.resource.data.creator)
            ;
            allow delete: if 
              // Ownership rules
              request.auth.uid == resource.data.creator
            ;
        }
        match /sharedAnnotationListEntry/{sharedAnnotationListEntry} {
            allow get: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.private != true) || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow create: if 
              // Type checks
              request.resource.data.createdWhen is timestamp &&
              request.resource.data.uploadedWhen is timestamp &&
              request.resource.data.updatedWhen is timestamp &&
              request.resource.data.normalizedPageUrl is string &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow update: if 
              // Type checks
              (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
              (!('uploadedWhen' in request.resource.data.keys()) || request.resource.data.uploadedWhen is timestamp) &&
              (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
              (!('normalizedPageUrl' in request.resource.data.keys()) || request.resource.data.normalizedPageUrl is string) &&
            
            
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(request.resource.data.sharedList)).data.creator == request.resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(request.resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
            allow delete: if 
              // Permission rules
              ((get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.platform == "bsky") || (get(/databases/$(database)/documents/sharedList/$(resource.data.sharedList)).data.creator == resource.data.creator) || (exists(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/sharedListRole/$(resource.data.sharedList)/users/$(request.auth.uid)).data.roleID >= 400)))
            ;
        }
        match /conversationThread/{conversationThread} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              request.resource.data.updatedWhen is timestamp &&
              request.resource.data.normalizedPageUrl is string &&
            
            
              // Permission rules
              true
            ;
        }
        match /conversationReply/{sharedAnnotation} {
            match /replies/{conversationReply} {
                allow get: if 
                  // Permission rules
                  true
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.normalizedPageUrl is string &&
                  request.resource.data.content is string &&
                
                
                  // Ownership rules
                  request.auth.uid == request.resource.data.user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('normalizedPageUrl' in request.resource.data.keys()) || request.resource.data.normalizedPageUrl is string) &&
                  (!('content' in request.resource.data.keys()) || request.resource.data.content is string) &&
                
                
                  // Ownership rules
                  request.auth.uid == resource.data.user && ((!('user' in request.resource.data.keys())) || request.auth.uid == request.resource.data.user)
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == resource.data.user
                ;
            }
        }
        match /user/{id} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              (!('displayName' in request.resource.data.keys()) || request.resource.data.displayName == null || request.resource.data.displayName is string) &&
              (!('platform' in request.resource.data.keys()) || request.resource.data.platform == null || request.resource.data.platform is string) &&
              (!('platformId' in request.resource.data.keys()) || request.resource.data.platformId == null || request.resource.data.platformId is string) &&
              (!('firebaseId' in request.resource.data.keys()) || request.resource.data.firebaseId == null || request.resource.data.firebaseId is string) &&
            
            
              // Ownership rules
              request.auth.uid == id
            ;
            allow update: if 
              // Type checks
              (!('displayName' in request.resource.data.keys()) || request.resource.data.displayName == null || request.resource.data.displayName is string) &&
              (!('platform' in request.resource.data.keys()) || request.resource.data.platform == null || request.resource.data.platform is string) &&
              (!('platformId' in request.resource.data.keys()) || request.resource.data.platformId == null || request.resource.data.platformId is string) &&
              (!('firebaseId' in request.resource.data.keys()) || request.resource.data.firebaseId == null || request.resource.data.firebaseId is string) &&
            
            
              // Ownership rules
              request.auth.uid == id
            ;
        }
        match /userFCMRegistration/{user} {
            match /objects/{userFCMRegistration} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.token is string &&
                  request.resource.data.createdWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('token' in request.resource.data.keys()) || request.resource.data.token is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /userPublicProfile/{user} {
            allow get: if 
              // Permission rules
              true
            ;
            allow create: if 
              // Type checks
              (!('websiteURL' in request.resource.data.keys()) || request.resource.data.websiteURL == null || request.resource.data.websiteURL is string) &&
              (!('mediumURL' in request.resource.data.keys()) || request.resource.data.mediumURL == null || request.resource.data.mediumURL is string) &&
              (!('twitterURL' in request.resource.data.keys()) || request.resource.data.twitterURL == null || request.resource.data.twitterURL is string) &&
              (!('substackURL' in request.resource.data.keys()) || request.resource.data.substackURL == null || request.resource.data.substackURL is string) &&
              (!('bio' in request.resource.data.keys()) || request.resource.data.bio == null || request.resource.data.bio is string) &&
              (!('avatarURL' in request.resource.data.keys()) || request.resource.data.avatarURL == null || request.resource.data.avatarURL is string) &&
              (!('paymentPointer' in request.resource.data.keys()) || request.resource.data.paymentPointer == null || request.resource.data.paymentPointer is string) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
            allow update: if 
              // Type checks
              (!('websiteURL' in request.resource.data.keys()) || request.resource.data.websiteURL == null || request.resource.data.websiteURL is string) &&
              (!('mediumURL' in request.resource.data.keys()) || request.resource.data.mediumURL == null || request.resource.data.mediumURL is string) &&
              (!('twitterURL' in request.resource.data.keys()) || request.resource.data.twitterURL == null || request.resource.data.twitterURL is string) &&
              (!('substackURL' in request.resource.data.keys()) || request.resource.data.substackURL == null || request.resource.data.substackURL is string) &&
              (!('bio' in request.resource.data.keys()) || request.resource.data.bio == null || request.resource.data.bio is string) &&
              (!('avatarURL' in request.resource.data.keys()) || request.resource.data.avatarURL == null || request.resource.data.avatarURL is string) &&
              (!('paymentPointer' in request.resource.data.keys()) || request.resource.data.paymentPointer == null || request.resource.data.paymentPointer is string) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
        }
        match /personalDeviceInfo/{user} {
            match /objects/{personalDeviceInfo} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  (!('firebaseId' in request.resource.data.keys()) || request.resource.data.firebaseId == null || request.resource.data.firebaseId is string) &&
                  request.resource.data.type is string &&
                  request.resource.data.os is string &&
                  (!('browser' in request.resource.data.keys()) || request.resource.data.browser == null || request.resource.data.browser is string) &&
                  request.resource.data.product is string &&
                  (!('name' in request.resource.data.keys()) || request.resource.data.name == null || request.resource.data.name is string) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('firebaseId' in request.resource.data.keys()) || request.resource.data.firebaseId == null || request.resource.data.firebaseId is string) &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type is string) &&
                  (!('os' in request.resource.data.keys()) || request.resource.data.os is string) &&
                  (!('browser' in request.resource.data.keys()) || request.resource.data.browser == null || request.resource.data.browser is string) &&
                  (!('product' in request.resource.data.keys()) || request.resource.data.product is string) &&
                  (!('name' in request.resource.data.keys()) || request.resource.data.name == null || request.resource.data.name is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalDataChange/{user} {
            match /objects/{personalDataChange} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.type is string &&
                  request.resource.data.collection is string &&
                  request.resource.data.objectId is string &&
                  request.resource.data.createdWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('type' in request.resource.data.keys()) || request.resource.data.type is string) &&
                  (!('collection' in request.resource.data.keys()) || request.resource.data.collection is string) &&
                  (!('objectId' in request.resource.data.keys()) || request.resource.data.objectId is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalBlockStats/{user} {
            match /objects/{personalBlockStats} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnnotation/{user} {
            match /objects/{personalAnnotation} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.localId is string &&
                  (!('body' in request.resource.data.keys()) || request.resource.data.body == null || request.resource.data.body is string) &&
                  (!('comment' in request.resource.data.keys()) || request.resource.data.comment == null || request.resource.data.comment is string) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId is string) &&
                  (!('body' in request.resource.data.keys()) || request.resource.data.body == null || request.resource.data.body is string) &&
                  (!('comment' in request.resource.data.keys()) || request.resource.data.comment == null || request.resource.data.comment is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnnotationSelector/{user} {
            match /objects/{personalAnnotationSelector} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalTextTemplate/{user} {
            match /objects/{personalTextTemplate} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.localId is string &&
                  request.resource.data.title is string &&
                  request.resource.data.code is string &&
                  (!('order' in request.resource.data.keys()) || request.resource.data.order == null || request.resource.data.order is number) &&
                  request.resource.data.isFavourite is bool &&
                  (!('outputFormat' in request.resource.data.keys()) || request.resource.data.outputFormat == null || request.resource.data.outputFormat is string) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId is string) &&
                  (!('title' in request.resource.data.keys()) || request.resource.data.title is string) &&
                  (!('code' in request.resource.data.keys()) || request.resource.data.code is string) &&
                  (!('order' in request.resource.data.keys()) || request.resource.data.order == null || request.resource.data.order is number) &&
                  (!('isFavourite' in request.resource.data.keys()) || request.resource.data.isFavourite is bool) &&
                  (!('outputFormat' in request.resource.data.keys()) || request.resource.data.outputFormat == null || request.resource.data.outputFormat is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnnotationPrivacyLevel/{user} {
            match /objects/{personalAnnotationPrivacyLevel} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.localId is string &&
                  request.resource.data.privacyLevel is number &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId is string) &&
                  (!('privacyLevel' in request.resource.data.keys()) || request.resource.data.privacyLevel is number) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnnotationShare/{user} {
            match /objects/{personalAnnotationShare} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.remoteId is string &&
                  request.resource.data.excludeFromLists is bool &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('remoteId' in request.resource.data.keys()) || request.resource.data.remoteId is string) &&
                  (!('excludeFromLists' in request.resource.data.keys()) || request.resource.data.excludeFromLists is bool) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalListShare/{user} {
            match /objects/{personalListShare} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.remoteId is string &&
                  (!('private' in request.resource.data.keys()) || request.resource.data.private == null || request.resource.data.private is bool) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('remoteId' in request.resource.data.keys()) || request.resource.data.remoteId is string) &&
                  (!('private' in request.resource.data.keys()) || request.resource.data.private == null || request.resource.data.private is bool) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalList/{user} {
            match /objects/{personalList} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.name is string &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type == null || request.resource.data.type is string) &&
                  request.resource.data.localId is string &&
                  request.resource.data.isDeletable is bool &&
                  request.resource.data.isNestable is bool &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('name' in request.resource.data.keys()) || request.resource.data.name is string) &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type == null || request.resource.data.type is string) &&
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId is string) &&
                  (!('isDeletable' in request.resource.data.keys()) || request.resource.data.isDeletable is bool) &&
                  (!('isNestable' in request.resource.data.keys()) || request.resource.data.isNestable is bool) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalListDescription/{user} {
            match /objects/{personalListDescription} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.description is string &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('description' in request.resource.data.keys()) || request.resource.data.description is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalListEntry/{user} {
            match /objects/{personalListEntry} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalListEntryDescription/{user} {
            match /objects/{personalListEntryDescription} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.description is string &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('description' in request.resource.data.keys()) || request.resource.data.description is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnnotationListEntry/{user} {
            match /objects/{personalAnnotationListEntry} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalFollowedList/{user} {
            match /objects/{personalFollowedList} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.name is string &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type == null || request.resource.data.type is string) &&
                  request.resource.data.creator is string &&
                  request.resource.data.sharedList is string &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('name' in request.resource.data.keys()) || request.resource.data.name is string) &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type == null || request.resource.data.type is string) &&
                  (!('creator' in request.resource.data.keys()) || request.resource.data.creator is string) &&
                  (!('sharedList' in request.resource.data.keys()) || request.resource.data.sharedList is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalListTree/{user} {
            match /objects/{personalListTree} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.path is string &&
                  request.resource.data.order is number &&
                  request.resource.data.localId is number &&
                  request.resource.data.localListId is number &&
                  request.resource.data.localPath is string &&
                  request.resource.data.localParentListId is number &&
                  request.resource.data.localLinkTarget is number &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('path' in request.resource.data.keys()) || request.resource.data.path is string) &&
                  (!('order' in request.resource.data.keys()) || request.resource.data.order is number) &&
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId is number) &&
                  (!('localListId' in request.resource.data.keys()) || request.resource.data.localListId is number) &&
                  (!('localPath' in request.resource.data.keys()) || request.resource.data.localPath is string) &&
                  (!('localParentListId' in request.resource.data.keys()) || request.resource.data.localParentListId is number) &&
                  (!('localLinkTarget' in request.resource.data.keys()) || request.resource.data.localLinkTarget is number) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalContentMetadata/{user} {
            match /objects/{personalContentMetadata} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.canonicalUrl is string &&
                  (!('title' in request.resource.data.keys()) || request.resource.data.title == null || request.resource.data.title is string) &&
                  (!('lang' in request.resource.data.keys()) || request.resource.data.lang == null || request.resource.data.lang is string) &&
                  (!('description' in request.resource.data.keys()) || request.resource.data.description == null || request.resource.data.description is string) &&
                  (!('doi' in request.resource.data.keys()) || request.resource.data.doi == null || request.resource.data.doi is string) &&
                  (!('metadataTitle' in request.resource.data.keys()) || request.resource.data.metadataTitle == null || request.resource.data.metadataTitle is string) &&
                  (!('annotation' in request.resource.data.keys()) || request.resource.data.annotation == null || request.resource.data.annotation is string) &&
                  (!('sourceName' in request.resource.data.keys()) || request.resource.data.sourceName == null || request.resource.data.sourceName is string) &&
                  (!('journalName' in request.resource.data.keys()) || request.resource.data.journalName == null || request.resource.data.journalName is string) &&
                  (!('journalPage' in request.resource.data.keys()) || request.resource.data.journalPage == null || request.resource.data.journalPage is string) &&
                  (!('journalIssue' in request.resource.data.keys()) || request.resource.data.journalIssue == null || request.resource.data.journalIssue is string) &&
                  (!('journalVolume' in request.resource.data.keys()) || request.resource.data.journalVolume == null || request.resource.data.journalVolume is string) &&
                  (!('previewImageUrl' in request.resource.data.keys()) || request.resource.data.previewImageUrl == null || request.resource.data.previewImageUrl is string) &&
                  (!('releaseDate' in request.resource.data.keys()) || request.resource.data.releaseDate == null || request.resource.data.releaseDate is timestamp) &&
                  (!('accessDate' in request.resource.data.keys()) || request.resource.data.accessDate == null || request.resource.data.accessDate is timestamp) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('canonicalUrl' in request.resource.data.keys()) || request.resource.data.canonicalUrl is string) &&
                  (!('title' in request.resource.data.keys()) || request.resource.data.title == null || request.resource.data.title is string) &&
                  (!('lang' in request.resource.data.keys()) || request.resource.data.lang == null || request.resource.data.lang is string) &&
                  (!('description' in request.resource.data.keys()) || request.resource.data.description == null || request.resource.data.description is string) &&
                  (!('doi' in request.resource.data.keys()) || request.resource.data.doi == null || request.resource.data.doi is string) &&
                  (!('metadataTitle' in request.resource.data.keys()) || request.resource.data.metadataTitle == null || request.resource.data.metadataTitle is string) &&
                  (!('annotation' in request.resource.data.keys()) || request.resource.data.annotation == null || request.resource.data.annotation is string) &&
                  (!('sourceName' in request.resource.data.keys()) || request.resource.data.sourceName == null || request.resource.data.sourceName is string) &&
                  (!('journalName' in request.resource.data.keys()) || request.resource.data.journalName == null || request.resource.data.journalName is string) &&
                  (!('journalPage' in request.resource.data.keys()) || request.resource.data.journalPage == null || request.resource.data.journalPage is string) &&
                  (!('journalIssue' in request.resource.data.keys()) || request.resource.data.journalIssue == null || request.resource.data.journalIssue is string) &&
                  (!('journalVolume' in request.resource.data.keys()) || request.resource.data.journalVolume == null || request.resource.data.journalVolume is string) &&
                  (!('previewImageUrl' in request.resource.data.keys()) || request.resource.data.previewImageUrl == null || request.resource.data.previewImageUrl is string) &&
                  (!('releaseDate' in request.resource.data.keys()) || request.resource.data.releaseDate == null || request.resource.data.releaseDate is timestamp) &&
                  (!('accessDate' in request.resource.data.keys()) || request.resource.data.accessDate == null || request.resource.data.accessDate is timestamp) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalContentLocator/{user} {
            match /objects/{personalContentLocator} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.locationType is string &&
                  request.resource.data.location is string &&
                  request.resource.data.format is string &&
                  request.resource.data.originalLocation is string &&
                  request.resource.data.locationScheme is string &&
                  request.resource.data.primary is bool &&
                  request.resource.data.valid is bool &&
                  request.resource.data.version is timestamp &&
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId == null || request.resource.data.localId is string) &&
                  (!('status' in request.resource.data.keys()) || request.resource.data.status == null || request.resource.data.status is string) &&
                  (!('fingerprintScheme' in request.resource.data.keys()) || request.resource.data.fingerprintScheme == null || request.resource.data.fingerprintScheme is string) &&
                  (!('fingerprint' in request.resource.data.keys()) || request.resource.data.fingerprint == null || request.resource.data.fingerprint is string) &&
                  (!('lastVisited' in request.resource.data.keys()) || request.resource.data.lastVisited == null || request.resource.data.lastVisited is timestamp) &&
                  (!('contentSize' in request.resource.data.keys()) || request.resource.data.contentSize == null || request.resource.data.contentSize is number) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('locationType' in request.resource.data.keys()) || request.resource.data.locationType is string) &&
                  (!('location' in request.resource.data.keys()) || request.resource.data.location is string) &&
                  (!('format' in request.resource.data.keys()) || request.resource.data.format is string) &&
                  (!('originalLocation' in request.resource.data.keys()) || request.resource.data.originalLocation is string) &&
                  (!('locationScheme' in request.resource.data.keys()) || request.resource.data.locationScheme is string) &&
                  (!('primary' in request.resource.data.keys()) || request.resource.data.primary is bool) &&
                  (!('valid' in request.resource.data.keys()) || request.resource.data.valid is bool) &&
                  (!('version' in request.resource.data.keys()) || request.resource.data.version is timestamp) &&
                  (!('localId' in request.resource.data.keys()) || request.resource.data.localId == null || request.resource.data.localId is string) &&
                  (!('status' in request.resource.data.keys()) || request.resource.data.status == null || request.resource.data.status is string) &&
                  (!('fingerprintScheme' in request.resource.data.keys()) || request.resource.data.fingerprintScheme == null || request.resource.data.fingerprintScheme is string) &&
                  (!('fingerprint' in request.resource.data.keys()) || request.resource.data.fingerprint == null || request.resource.data.fingerprint is string) &&
                  (!('lastVisited' in request.resource.data.keys()) || request.resource.data.lastVisited == null || request.resource.data.lastVisited is timestamp) &&
                  (!('contentSize' in request.resource.data.keys()) || request.resource.data.contentSize == null || request.resource.data.contentSize is number) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalContentEntity/{user} {
            match /objects/{personalContentEntity} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.order is number &&
                  request.resource.data.name is string &&
                  request.resource.data.isPrimary is bool &&
                  (!('additionalName' in request.resource.data.keys()) || request.resource.data.additionalName == null || request.resource.data.additionalName is string) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('order' in request.resource.data.keys()) || request.resource.data.order is number) &&
                  (!('name' in request.resource.data.keys()) || request.resource.data.name is string) &&
                  (!('isPrimary' in request.resource.data.keys()) || request.resource.data.isPrimary is bool) &&
                  (!('additionalName' in request.resource.data.keys()) || request.resource.data.additionalName == null || request.resource.data.additionalName is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalContentRead/{user} {
            match /objects/{personalContentRead} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.readWhen is timestamp &&
                  (!('readDuration' in request.resource.data.keys()) || request.resource.data.readDuration == null || request.resource.data.readDuration is number) &&
                  (!('scrollMaxPercentage' in request.resource.data.keys()) || request.resource.data.scrollMaxPercentage == null || request.resource.data.scrollMaxPercentage is float) &&
                  (!('scrollEndPercentage' in request.resource.data.keys()) || request.resource.data.scrollEndPercentage == null || request.resource.data.scrollEndPercentage is float) &&
                  (!('scrollMaxPixel' in request.resource.data.keys()) || request.resource.data.scrollMaxPixel == null || request.resource.data.scrollMaxPixel is number) &&
                  (!('scrollEndPixel' in request.resource.data.keys()) || request.resource.data.scrollEndPixel == null || request.resource.data.scrollEndPixel is number) &&
                  (!('pageTotal' in request.resource.data.keys()) || request.resource.data.pageTotal == null || request.resource.data.pageTotal is number) &&
                  (!('pageEnd' in request.resource.data.keys()) || request.resource.data.pageEnd == null || request.resource.data.pageEnd is number) &&
                  (!('pageMax' in request.resource.data.keys()) || request.resource.data.pageMax == null || request.resource.data.pageMax is number) &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('readWhen' in request.resource.data.keys()) || request.resource.data.readWhen is timestamp) &&
                  (!('readDuration' in request.resource.data.keys()) || request.resource.data.readDuration == null || request.resource.data.readDuration is number) &&
                  (!('scrollMaxPercentage' in request.resource.data.keys()) || request.resource.data.scrollMaxPercentage == null || request.resource.data.scrollMaxPercentage is float) &&
                  (!('scrollEndPercentage' in request.resource.data.keys()) || request.resource.data.scrollEndPercentage == null || request.resource.data.scrollEndPercentage is float) &&
                  (!('scrollMaxPixel' in request.resource.data.keys()) || request.resource.data.scrollMaxPixel == null || request.resource.data.scrollMaxPixel is number) &&
                  (!('scrollEndPixel' in request.resource.data.keys()) || request.resource.data.scrollEndPixel == null || request.resource.data.scrollEndPixel is number) &&
                  (!('pageTotal' in request.resource.data.keys()) || request.resource.data.pageTotal == null || request.resource.data.pageTotal is number) &&
                  (!('pageEnd' in request.resource.data.keys()) || request.resource.data.pageEnd == null || request.resource.data.pageEnd is number) &&
                  (!('pageMax' in request.resource.data.keys()) || request.resource.data.pageMax == null || request.resource.data.pageMax is number) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalBookmark/{user} {
            match /objects/{personalBookmark} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalTag/{user} {
            match /objects/{personalTag} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.name is string &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('name' in request.resource.data.keys()) || request.resource.data.name is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalTagConnection/{user} {
            match /objects/{personalTagConnection} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.collection is string &&
                  request.resource.data.objectId is string &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('collection' in request.resource.data.keys()) || request.resource.data.collection is string) &&
                  (!('objectId' in request.resource.data.keys()) || request.resource.data.objectId is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalTwitterAction/{user} {
            match /objects/{personalTwitterAction} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalPageTextFetchAction/{user} {
            match /objects/{personalPageTextFetchAction} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalMemexSetting/{user} {
            match /objects/{personalMemexSetting} {
                allow list: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow get: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow create: if 
                  // Type checks
                  request.resource.data.name is string &&
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.updatedWhen is timestamp &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('name' in request.resource.data.keys()) || request.resource.data.name is string) &&
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('updatedWhen' in request.resource.data.keys()) || request.resource.data.updatedWhen is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow delete: if 
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnalyticEvent/{user} {
            match /objects/{personalAnalyticEvent} {
                allow create: if 
                  // Type checks
                  request.resource.data.createdWhen is timestamp &&
                  request.resource.data.type is string &&
                  (!('str1' in request.resource.data.keys()) || request.resource.data.str1 == null || request.resource.data.str1 is string) &&
                  (!('str2' in request.resource.data.keys()) || request.resource.data.str2 == null || request.resource.data.str2 is string) &&
                  (!('str3' in request.resource.data.keys()) || request.resource.data.str3 == null || request.resource.data.str3 is string) &&
                  (!('float1' in request.resource.data.keys()) || request.resource.data.float1 == null || request.resource.data.float1 is number) &&
                  (!('float2' in request.resource.data.keys()) || request.resource.data.float2 == null || request.resource.data.float2 is number) &&
                  (!('float3' in request.resource.data.keys()) || request.resource.data.float3 == null || request.resource.data.float3 is number) &&
                  (!('time1' in request.resource.data.keys()) || request.resource.data.time1 == null || request.resource.data.time1 is timestamp) &&
                  (!('time2' in request.resource.data.keys()) || request.resource.data.time2 == null || request.resource.data.time2 is timestamp) &&
                  (!('time3' in request.resource.data.keys()) || request.resource.data.time3 == null || request.resource.data.time3 is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
                allow update: if 
                  // Type checks
                  (!('createdWhen' in request.resource.data.keys()) || request.resource.data.createdWhen is timestamp) &&
                  (!('type' in request.resource.data.keys()) || request.resource.data.type is string) &&
                  (!('str1' in request.resource.data.keys()) || request.resource.data.str1 == null || request.resource.data.str1 is string) &&
                  (!('str2' in request.resource.data.keys()) || request.resource.data.str2 == null || request.resource.data.str2 is string) &&
                  (!('str3' in request.resource.data.keys()) || request.resource.data.str3 == null || request.resource.data.str3 is string) &&
                  (!('float1' in request.resource.data.keys()) || request.resource.data.float1 == null || request.resource.data.float1 is number) &&
                  (!('float2' in request.resource.data.keys()) || request.resource.data.float2 == null || request.resource.data.float2 is number) &&
                  (!('float3' in request.resource.data.keys()) || request.resource.data.float3 == null || request.resource.data.float3 is number) &&
                  (!('time1' in request.resource.data.keys()) || request.resource.data.time1 == null || request.resource.data.time1 is timestamp) &&
                  (!('time2' in request.resource.data.keys()) || request.resource.data.time2 == null || request.resource.data.time2 is timestamp) &&
                  (!('time3' in request.resource.data.keys()) || request.resource.data.time3 == null || request.resource.data.time3 is timestamp) &&
                
                
                  // Ownership rules
                  request.auth.uid == user
                ;
            }
        }
        match /personalAnalyticStats/{user} {
            allow get: if 
              // Ownership rules
              request.auth.uid == user
            ;
            allow create: if 
              // Type checks
              request.resource.data.installedWhen is timestamp &&
              (!('registeredWhen' in request.resource.data.keys()) || request.resource.data.registeredWhen == null || request.resource.data.registeredWhen is timestamp) &&
              (!('uninstalledWhen' in request.resource.data.keys()) || request.resource.data.uninstalledWhen == null || request.resource.data.uninstalledWhen is timestamp) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
            allow update: if 
              // Type checks
              (!('installedWhen' in request.resource.data.keys()) || request.resource.data.installedWhen is timestamp) &&
              (!('registeredWhen' in request.resource.data.keys()) || request.resource.data.registeredWhen == null || request.resource.data.registeredWhen is timestamp) &&
              (!('uninstalledWhen' in request.resource.data.keys()) || request.resource.data.uninstalledWhen == null || request.resource.data.uninstalledWhen is timestamp) &&
            
            
              // Ownership rules
              request.auth.uid == user
            ;
        }
    }
}